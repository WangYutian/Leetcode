class Solution {
public:
    ListNode *getMiddleofList(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head;
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    ListNode *mergeList(ListNode *a, ListNode *b){
        ListNode *pre = new ListNode(0);
        ListNode *tmp = pre;

        while(a && b){
            if(a->val <= b->val){
                pre->next = a;
                a = a->next;
            }
            else{
                pre->next = b;
                b = b->next;
            }
            pre = pre->next;
        }
        if(a)
            pre->next = a;
        else
            pre->next = b;

        pre = tmp->next;
        tmp->next = NULL;
        delete tmp;
        return pre;
    }
    ListNode *sortList(ListNode *head) {
        if(!head || !head->next)
            return head;

        ListNode *middle = getMiddleofList(head);
        ListNode *next = middle->next;
        middle->next = NULL;
        return mergeList(sortList(head), sortList(next));
    }
};
